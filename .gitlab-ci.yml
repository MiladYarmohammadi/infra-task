stages:
  - unit test
  - build
  - package
  - test
  - production

variables:
  APP_VERSION: $CI_PIPELINE_IID

.unit test:
  image: php:8.2-alpine
  stage: unit test
  before_script:
    - apk --no-cache add autoconf build-base curl
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - pecl install redis && docker-php-ext-enable redis
    - composer install
  script:
    - cp .env.example .env
    - sed -i "s/APP_KEY=.*/APP_KEY=$APP_KEY/" .env
    - php artisan test

build docker image:
  stage: package
  image: docker:27.0.3
  services:
    - docker:27.0.3-dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE:$APP_VERSION -t $DOCKER_REGISTRY_IMAGE -t $DOCKER_REGISTRY_IMAGE:$APP_VERSION .
    - docker image ls
    - docker push --all-tags $CI_REGISTRY_IMAGE
    - echo $DOCKER_REGISTRY_PASSWORD | docker login -u $DOCKER_REGISTRY_USERNAME --password-stdin
    - docker push --all-tags $DOCKER_REGISTRY_IMAGE

.test docker image:
  image: curlimages/curl
  stage: test
  allow_failure: true
  services:
    - name: $CI_REGISTRY_IMAGE:$APP_VERSION
      alias: website
  script:
    - curl http://website:8000 | grep "Infra Task"

deploy to kubernetes:
  stage: production
  image: alpine
  # when: manual
  variables:
    APP_NAME: infra-task
  before_script:
    - apk add openssh-client
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - chmod 600 $SSH_PRIVATE_KEY
    - ssh-add $SSH_PRIVATE_KEY
  script: 
    - ssh $PRODUCTION_SERVER docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD
    - ssh $PRODUCTION_SERVER microk8s kubectl set image deployment.apps $APP_NAME $APP_NAME=$DOCKER_REGISTRY_IMAGE:$APP_VERSION
    - ssh $PRODUCTION_SERVER microk8s kubectl get all

